from yaml import load_all

try:
    from yaml import CLoader as Loader
except ImportError:
    from yaml import Loader


# input: preprocessed collection of documents
# output: for each document ID:
#           - bigram language model (min freq of bigram = 5)
# strategy: split on whitespace, apply normalizers, zip, join, group by [string, count]
# NOTE: let's bigram everything (topics, body, text), but we need to delineate between those sections


class ReutersBigramLangModel:
    @staticmethod
    def generate(ctx):
        bigram_lang_models = []
        with open(ctx.corpus_path(), "r") as corpus_handle:
            corpus_stream = load_all(corpus_handle, Loader=Loader)
            for doc in corpus_stream:
                bigram_lang_models.append(
                    ReutersBigramLangModel._bigram_lang_model_for_doc(doc)
                )

        # dump bigram_lang_models to the right spot (generated by ctx)

    @staticmethod
    def _bigram_lang_model_for_doc(doc):
        print("STUB")
        # TODO: for topics, title, body sections: split on whitespace, apply normalizer/filter, zip up, group and count, keep only 5+ occurrence bigrams
        # TODO: might need a model for the actual result :/ just make it internal
